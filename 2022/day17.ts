const smallInput = ">>><<><>><<<>><>>><<<>>><<<><<<>><>><<>>" as const;
const bigInput =
  ">><<<>>>><<>>><<>><>>>><<<><<><>>><<<><<<>>><<>>><<<>>><>>>><<<>>>><<<><<>>><>>>><<>>>><<>>><><>>>><<<>><<<>>>><<>>>><<<>>><<>>><>>><<<>><<<<>><<<<>>>><<<<>>>><<><<<>>>><<><>>>><<><>>><<<><<><>>>><<<>>><>>>><<<>>><<>>>><<<><<<>>><><>><>>>><<>>><<<><>>>><<>><<<>>>><<>><>>><<>><<>>>><<>><<<>><<>>><<>>>><><<>><<<<><<>>><<<<>><>><>>>><<><<<>><<<<>>><>>><<<<>>><><<<>>><<>><>>>><<>>>><<<>>>><<>><<>>>><<<>><<>><<<><<<<>>>><<<><<<><>>><><<<<>>>><><<<<><<<<>><>>><<>><<<<><<<<><<><<<<>><<<<>><<>><<<>><<<>><>><<<>>><<>><<<<>>>><<<<>>><<>>>><<<>><>>>><<<<>>>><<<<>>>><<>><>><<>><<<<>>><<<>>><<<<>>><<<>>>><<>>>><<>>><>><<>><<<><><><<<<>><><<<<>><<>><<>>><<<<>>>><>>><<>>>><<<>>><<<>>><<<><><>>><<<<>>><>>><<<>>><><<>>>><<<<>>>><<<<><>>><<>>>><<<<>><<<>>><><<<<>>><<<>><<>>>><<>>><<<>>><<<>>><<>>><<>>>><<<<>><<><>>><<<<>>><<<>>><>>>><<<>>><<<>>><<<<>>>><<<<>><<<>>>><<<><<<<><<>><<<>>><<<>>>><<<>><<<<>>><<<<><>>>><<<>>><><<<>>>><<><<<><<<<>>>><<>><>>>><<<>>><<<>>><<>>>><>>><><<<<>>>><<<>>><<<<>><>>>><>><>>>><>>>><<<<>>>><<>>><<>><<>><<<><>><<<>>><<>>>><<<>><<><<<<>>>><<<<><><<>>><>><><<>>><<>>>><<><<<>><<<>>><>>>><<<><<>>>><<>>>><<>>><<<>>>><>>><<<<>><<<<><<<<><<<<>><<<<><<<>>>><>><<<>><<><<>><<<>><>><<<<>>><>><<<<>><<<<>>>><<<>><<<<>>>><<<>><<>>>><<<<>>><>>>><<>>>><<<<>>><<>>>><>>><<<<>>>><<<>>><<<><<<>><><>><<<<>>>><<<<>><<<><<<>>>><<>>><<><<>>><<>><<<>>><<<>>><<<>>>><>>>><<<<>>>><<<>><<<<><<<>><<>>><>>><<<<>>><<<>><>>><<<><<<<><<>><<<<><>><<<>><<><<<>>><<<<>>><<<>>><<><>><<<<><><<<<>>>><<>>><<<<>>><>><<<<><<>><<<<>>><<>>><<<<>><<>>><<<<>><>>>><<>><<<<>>>><<>>>><<<<>><<<>><<>>>><<<>>>><>>>><>>>><<<><<>>><<>>><<<<>>><>><><<<<>>>><<<><<<>>><>>><<>><<>>><<>>><<<>>><<<<>><<>>>><<<><<>>>><>><<<>>>><>>>><<<>>><<><<<<>><<<>>><<>>><<<<>>><<<<><<<<>>><<<>>><>>><<>><<<<>>><>><<><<<<>>><<>>><>>><<>>><><<>>>><<<<>>><>>><>>><>><>>><<<<>><<<><<>><<<<>>><>>>><<<<>><<<<><<<<>>>><<>>><<<>>>><<<>><>>><<<<>>><<>>>><<>>><<>>>><>>>><<><<<>>><<<>><<>><<<<>><>>>><<>>>><<><<<>>><>>>><<<<><<<>><>>><<<<>><>><<>>>><<<>><<<>><>>>><><>>>><>>><<<<>>>><<<>>>><<<>>><><<<<><>>><<<<>>>><<<><<><<<><<>>>><><>>>><<<<>><<<<>>><><><<<>><<>>>><<<><<<<>>><<<<><<<<>>><<<>>><<><<>>><<<>>><<<>>><<>>><<>><>><<<<>>><<<>>><<<>>><>>><<>><<>>><<<<>>>><<><<>>>><<><<<<>>><<<><<<>>><><<<>>><<>>><<<>>>><<<<>>>><><<>>><<<>>>><<<>>>><<><<>>>><<<>><<>><<>>>><<>><<<><><<<><>>><><>>><<>>>><<<>><>>><>><>>>><<<<>>><>>><>><<<><<>>>><<<>>>><<><><<<>><<>><<<><<<><<><<<<>>><>><<<<>>><<<>>><<>>><<>>><<><<<<>>>><<>>><>><<<<>><<>>><>><<>><<<><>>><<><<<>>>><<<><>>>><<<<>><<<<><>><>><><<<>><<<>>>><><<<><<>><<>><>>><<<>>>><<>><<<<>>>><>>>><<>><<<>><<<>><<<<><<<<>>><<>>>><<<<>><<>>>><<<<>>><<<>><<>><<>><<<<><>>>><<<<><<<<>>><<<>><<>><<<>><><><<<<><<>><<><<<<>>><<>><<<>>><<<<><<>><>><<<><>>><>>><>><<>>>><<<<>>>><<<<><<<>>>><<<>><>>>><>>>><>>><<>>>><<<<>><<<>>><<<<>>><<>>><>>>><<<<>>><<<<>>>><<><<>><>>>><<><>>>><>>><<<><<>>><<<<>>>><>><<<<><<<<><>>><><<<<>>><>>><<<>>>><<>>>><<><<<>>><<<>><<>>><>><>>><<>>><<<<>>>><<<>><><<<<>>><<<<>><<>>>><<>>>><>>><<<>>>><<<>>>><<>>><<>><<<>>>><<<<>><<>>>><<<>>>><>>><<>>><<>><<<>>>><<>><><>><<<><<<>>><>>>><<><><<<<>><>>><<<<>><<<><>>>><>>>><<><<<<>>>><>>>><>><<<<>>>><<>><<<<><<<><<<<><<>><>><>>><>><<>><<<>><<<<><<<>>>><<<<>><<><<<<>>>><<<>>><<>>>><<>><<<<><<<<>>>><<<>><<<>>>><<>>><>>>><<><<>>>><<<><>>><>>><<<>>><<<><<>>><<>>><><>>>><<<>>><<<>>>><<<<>><><<<>>><<>><<<<>>>><<>>><<<<><>><<<<>>>><<<<>>>><><>>>><>><>>><<<<><><<<>>>><<<<>><>>><<<<>>>><<>>>><<<<>><>>><<>><<>><>>>><<<><<<<>>><<<><<>>>><<>><<<>><<<<>><<<>>>><>>>><<>>><<<>><<>><<<>>>><<<>><>>>><>><<<>>>><>><<>>>><>>>><<<>>>><<<<>>>><<<><>><<<<>>>><>>>><<>><<<>><<><<<<>>>><<<<>>><<>>><<<<>><<<>><<<><<<><<<<>><<<<>>>><<>>><>>><>>>><<<>>>><<<>>><<<>>>><<>>><<<>>><>><<>>>><<<>>>><<>><<<<><<><<><<>><>>><<<<>>><<<<>>>><<<>>>><<>>><<<>>>><<<>><<>>><>>><<<<><<<<>>>><<<>>>><><<<<>>><>><<><<>><<<>>><<<<><>><<<>><>><<<<>><<<><<><<<<>>>><<>>>><<<<>>><<<<><<><<<><<<<>><<<<>>>><<<<>><<<>>><<><<>><<<>><<<>>><>>>><<>>><<<><<<<><><<<>><<<<>>><<<><>>>><>><>><<<>><>>>><>>>><>>>><<>><<<<><<<>><<<>>><<<<>>><<<>>>><<<>><><<<>><><<<<>><<<<>>><<<><<<>>><<><<>>>><>><<<><<<>><>><<<<><<>>>><>>><<<<>>>><<<>><<>>>><>>><<<<>>><<>>><<<<>><<><<><<<>>>><<<><<<<>><>>>><<<<>><>><<<>><<<>>><<<<>><>>>><<<<>><<>><<<<>>><<<<><<<<>><>><<<>>>><<<>>>><<<>>>><>>>><<<>>>><<>><<><>>><<<<>>><<<<>>>><>><<<<><<<<>>><>><<<<>>>><<<>>>><<>>><>><<><<<><<<><><<<<>>>><<<>>><<<<>>>><<>><<<>>>><<><>>><<<>><>><<<><>><<>><><<<><<><>>>><<<<>>>><>><<>><><<<>><<<>>><<>>>><<<<>><<<<><>>><>>>><<<<>>><<<<>>><<>><<>><>>>><<<>>>><<<>><<><<<<>><>>>><<<<>>>><<><<<><<<<><>><<<>><<<>>><<>><<<<>>><<<<>><<><>>>><<<>>>><<<>>>><>><<<<>>><<>><<<><<>>><<>><<<<>>><<<<>>>><<<>><<<<>><<>>>><<>>>><<<>>>><><<>>>><<<<>><<><>>>><><<<>>>><<>>><<>>><<>><<<><><>>>><><<><<<<>>>><>><<<<>>>><<<>><<<<>>>><><<<>>>><<<>><<<<>>>><>><><<<<>>>><<<>>><<<>><<<<>>>><<<>>><<<>>><<<>>>><<<><<<>>><<<>><<<>>><>>>><<<<>><><<<><<><><<<><<<>><<>><>>><>>>><<><<<><<<<><><<>>><<>>>><<>><>><<>>>><<<>><<>>>><<<><<>><><<<<>><<<<>>>><<>>>><<<>>>><>>>><<><<<>>>><<<>>>><<<<>><<>>>><<<<><<<<>>>><<<<>>>><<<>><<>>><<<>><<<><<>>>><<<<>><<<<><<><>>><<<>><<><>>>><<<<>>>><>>>><<><<<>>><<<<><<>><<<<>>>><<<><>><<>>><>>>><<><<>>><><<<><<<<>>>><><<<<>>><<>><<<>>>><><<<<><<<<>>>><>><<><<<>>><<<><>>><<<>>><<<<>><<<>>><<<>>><<<>>>><<<>>>><<<<><>>>><<>>><><<<<><<<><>><<<><<<><><<<>><<<>>>><<<<>><<>>>><<<<>>><<<>><<<>>><<<<>>><<>>><<>>>><<>>><<<><>>>><<>>>><>>><<>>>><>><<<>><<>>><<>><<<><<<<>><<<>>><<<<>><<<<><><<<<>>>><>>>><><>><<<>>>><<><<<><<><>><<>><<><<<>><>>><<>>>><<>>>><<>>><<<>>><<>>>><<<>><<<<>>><<>><>>><<<<>>>><<>><<<<><<<<><>><>>>><>>><<<<>>>><<<<>>><<<>><><<>>>><<>><>>>><<<><>>>><<>>>><<>>><>>><>>><<><><<<>><<>>><<>>><<>><<<><>>><<<>>>><<>>><>><<>>><><<<>>>><<>>>><>>><<<<>><><<<<><<<<>><<<>>><<>><>>>><<>>><<<>>><<<<>><<<>>>><<<>>>><<<>>>><<><>>><<>>>><<<>>>><<<<><<<<>>>><<>>>><<<>>><<<<>>>><<<<>><<<<>><<<<><><<<>>>><<>><<<>>>><>><>>>><<>>>><<<>><>><<<<><>><<>>><<>>><<<<>>>><<<><><><<>>>><<<<>><<<<>><><<><<<>>><<<>><<<<>><<<><<<>>>><<<><<<>>>><<><<<>><<<<>>><<<>>>><><<<>>><>>>><>>><<>>><>>>><><>>><<<<><><<>><>>>><<<><<<>>>><<<<>>>><<>>><>><<<><<><<<>>><<>><<<>>>><<<<>><<<>>><<<>>>><>><>><>><><<<>><<>>><<<>><>><>>><<<>><><<<>>>><<><><<<<><<>><<<><>><<<<>>>><<<>>><<>>>><<<>>>><<<><<>>>><<<<>>>><<<>><<<<>>>><<><<>>><<>>>><>><>><<<<><>>><>>>><<>><>>>><<>>><<>>><<>>><>><>>>><<<>>>><<>>>><<<>><<>><<>>>><<>>><<<<><<><<<<><<>><<<<>>>><<<>><><><><>>><<<<>><><<<<>>>><>>>><<>>><<<<><<><<>><><<>>>><<<>>><<<<>>>><<<>><<<<>><<<>><>>>><<<><>>>><>>>><<<<>><>>>><<<>>>><>>>><<<<><>><>>>><<<<>>><>><<<>>>><<<><<<><<<<>>><<<>><>><>>>><<<>><<<>>>><<>>>><<>>>><<><<><<>><>><>><<<>>>><<><<<<>>><>>><>><<>><<<>>>><>>>><<<<>><><<>>><<><>>><>>><<>>><<<<><<<>>>><<<<>>>><<<><>>><<>>>><>>>><<<<>><><<><<<<>><<>><>>>><<<<><<<><>><<<<>><<>><<<<>><><<<<>><<<<><<<<><<><<<><>>>><<>>>><<<<>>><>>>><<>><><<>>>><>>>><<<>>><<<>>><<><<>>>><<>>>><<<>><<<><<<<>>><<>>>><<>>>><><<>>><<<><<<><<><<<<>>><<<<>><<<><<<>>>><>><<>><<<><<<>>>><<><<<<>>><<<<>>><<<<>><<<>>><>>><<>>><<<<>><<<<><<<>><<<>><<<<>>><<<<>>>><<><>>><<<<>><<<>><<>>>><><>>><>><<><<<<>><<<<>>><<>>><<<<><<>>>><<<<><><<>><<<>><<>>><<<<><<<><>><>><>>><<<>><><>>>><<<><<<<>>>><>><<<<>><<<<>><><>><>>><<<<>>>><<>><<>>>><<<>>><<<><<<>>><>>>><<<>>><<<>>><<<>>>><<<>>>><>>>><<>><<<<><>><<<>><<<<>>><>>><>><>>><>>>><<<<>>>><>><<<<>>>><>><<>>><<><<><><<<><><<<>><<>>>><<><<<><<<<>>><<<><<<<>><<<<>>><<><<>>><<<><>>><<><<<<>><<<<>>><>>>><<>>><<><><<><>>>><<><<<>>>><<>>><<<<>>>><>>><<<<>>>><<>>>><<>>><<<>><>><<><>><<<<>>>><<<<>>><<><>>><<<<>>><>>><<<>>><<<<>>>><<<>><<>><<><<<<>>><<<><><<<>>><<<>>><<>>>><<>>>><<>>><<<<><<<<><><<>><><<<<>>>><<<>>>><<>><<<<><<<<>><><<<<>>><>><<<<>>>><<<<><>><<<>><<>>><><>>><<>><<<>>><<<<>><<<>>><<>><<>>>><<<<>>>><<>><>><<<>>><<<>>>><<<>>>><<<<>>><<><<><<<<>><<<>>><><<<<>>><>><<>>>><<<<>>>><<<<><<><<>><>>><<><<<>>>><<<><><><<>><>>><<<<><<<<>>><<><<>><>><<<>>>><<<>>>><<><<<>>><>>><<>><<>><<<>>>><<>><<<<>><<<<>><<<<>><<<>>><<><<<<>>><<<<><<<<>>><>>><<<<>><<<<>>>><<>>>><<>>>><><<<><<<<>>><<<>>><<<<>>>><<>>><<>>><<<<>><<<<><<<<><<>>>><<<<>>>><><<<>>><<>><><>>><<<>>><<<><>>><>><<>>>><>>>><>>>><<<<>>><<<>>><>>><>>><<<><>><<<<>>><<>>><>>><<<>>><<>>><>><>><<>><<<>><<<>>>><<<<>><<<><<<>>>><>><>><<<>>>><<<>>><<>>><><<<<><<<<>>>><<<<>>>><><>><>><<<>><<<>><<<<>>>><<>><<<<>>><><<<>><>>>><<>>><<<<>>>><<>><<<<>><>>>><<<<><<<>><<<>>><<<<>><><<<<>>><><<>>>><<<><>>><<<<>>>><<<>><<<<>>>><<<<>>><<>><<<<>><<<<>><<>>>><><<>>>><><<<>>>><<<>>><<<<><<<>><>>><>>><<<>>>><<>>><<<<>><<>>><><<<>><><<<>>>><<<><>><<>>><<<<>><<<>>>><<>>>><<<<>>>><<>><<>>><<<>>><<<>>><>><>>>><<<<>>><<><><<<>>><<<<>>><>>><<<>><<>>>><<<<>><><<<>><<>>><<><>>><<<><<<<>><>><<<>>>><<>>>><>>><>>><<<<>>>><<<<>>><>><><<><<>><>>>><>>><<<<><<>>><<<<>>>><<<>>><<<>><<<<>>>><<>>>><><<><>>><<>>>><<>>><<<>>>><<><<>>>><<<<>>>><>>>><>><<>>><<<>>>><><<>><<><<<<>>><<<>>><<<<>><<>><<<>>>><<<>>>><<<<>>><<<><<<>>><<><<<>>><<<>>>><<<<>><>><<>>><<>>>><<<>>>><<<>>>><>>><<><>>>><>>><<<><<<<><><<<<>>><<<>><<<<>>><><<>><<<<>><>>><>><<<<>>>><><<>><<>>><<<<>><<<><<<>>>><<<>>><<<<><><<<<>>>><>><<><<<<><>><<><<<<>>><<<>>>><<>>>><<<<><<<>>><<<<>>>><<<<><<>>><<<<>>><<<<><<<>><<><<<<><<>>>><><<<<>>>><<<>><>>>><>>><<<<>><><<<<>><<<><<>><<<>>>><<><<><<<><<>>>><<<<>>><<<>>><<<<><<<>>>><<<<>><>><<>>>><>>><<<<><<<<>>>><<<<>>><>>>><<<><<<<>>><>>>><>><<><>><<<<>>><<<>>><<<<><<<<>>><<<><<>>><<<<>>><><<<<><<>><>>><<<<>>><><<<>>>><<<<><<<>><<<<>>><>>>><>><<>><<<<><><>>><<>><>>><<>>>><<<>>><<>>>><<<>><<<<>>><>><<>><<<>>><<<>>>><<<<>>><<<>>><>>>><<>><<<<>>>><<>>>><><>>>><<<><<<>>>><<><>>>><<<<>><>>><<<><><<<<><><<<<>>>><<>><<<>>>><>>>><>>><>>><<<><<<>><>>><>>>><<<<>><<<<><<>>><<<><<<<>><<<<><<<<>><<>><<<><>><<<><><<>><<>>><><<>><>>><>>>><>>>><<<>><<>>><>>><<<<>><<<<>>>><<>>><<<>><<>>><<<><<>><<>>><<><<<<><<<>>><<<<>>><<<<><>>>><>><<<>>>><>>>><<<>>>><<<<>>>><<>>>><>>>><><<>><<<<>>><><<><<<><<<<>>>><<<<>>><<<<>>><>>>><<><<<><<>>><<>>><<<<>>>><><<><>>>><<<<>>>><>>><<<<>>><>><<<<>>><>><<<>>>><<<><>><<<>>><<<>><<<<><<>>><<<>><><<<<>>>><<<>>>><<>>><<>>>><<<<>><<<><<>><<>><><<><><<<<>>>><>>" as const;

const shapesNames = ["-", "+", "L", "I", "sq"] as const;
const rockHeights = [1, 3, 3, 4, 2] as const;
type ShapeName = typeof shapesNames[number];

type Rock = boolean[][];
const parseRawShape = (rawShape: string): Rock =>
  rawShape
    .trim()
    .replace(" ", "")
    .split("\n")
    .map((row) => Array.from(row).map((ch) => ch === "#"));
const MINUS = "####";
const PLUS = `
.#.
###
.#.
`;
const L = `
..#
..#
###`;
const I = `
#
#
#
#`;
const SQUARE = `
##
##`;

type Movement = "<" | ">";
type Figure = [number, number][];

const shapes: Record<ShapeName, boolean[][]> = {
  "-": parseRawShape(MINUS),
  "+": parseRawShape(PLUS),
  L: parseRawShape(L),
  I: parseRawShape(I),
  sq: parseRawShape(SQUARE),
};

const printNumber = (num: number) => {
  const digits = ["0️⃣", "1️⃣", "2️⃣", "3️⃣", "4️⃣", "5️⃣", "6️⃣", "7️⃣", "8️⃣", "9️⃣"];
  const str: string[] = [];
  if (num === 0) {
    return digits[0];
  }
  // 17 => 1️⃣7️⃣
  while (num > 0) {
    str.unshift(digits[num % 10]);
    num = Math.floor(num / 10);
  }
  return str.join(""); //.padStart(12, "0️⃣");
};

const putFigureToField = (field: boolean[][], figure: Figure) => {
  for (let k = 0; k < figure.length; k++) {
    const [i, j] = figure[k];
    field[i][j] = true;
  }
};
const CHAMBER_WIDTH = 7;

const getHighestLineWithRockFn =
  (field: boolean[][]) =>
  ([jStart, jEnd, yEnd] = [0, CHAMBER_WIDTH - 1, field.length - 1]) => {
    for (let i = yEnd; i >= 0; i--) {
      for (let j = jStart; j <= jEnd; j++) {
        if (field[i][j]) {
          return i;
        }
      }
    }
    return -1;
  };

const printField = (field: boolean[][], figure: Figure = []) => {
  field = [...field.map((row) => [...row])];
  const hightestLine = getHighestLineWithRockFn(field)();
  putFigureToField(field, figure);
  //   const width = 7;
  console.clear();
  const rendered = [
    ...field.map(
      (row, i) => `|${row.map((ch) => (ch ? "🤎" : "🤍")).join("")}|`
      //   `|${row.map((ch) => (ch ? "🤎" : "🤍")).join("")}| ${printNumber(i)}${
      //     i === hightestLine ? "⬅️⬅️⬅️" : ""
      //   }`
    ),
    //   .reverse(),
    // "+🪨🪨🪨🪨🪨🪨🪨+",
    // " 1️⃣2️⃣3️⃣4️⃣5️⃣6️⃣7️⃣ ",
  ].join("\n");
  console.log(rendered);
  return rendered;
};

const day17 = (jetPattern: string, rocksToStop = 2022) => {
  const CHAMBER_WIDTH = 7;
  let currentRockPointer = -1;
  let currentMovementPointer = -1;
  //   let towerHeight = 0;
  const emptyLine = () => new Array(CHAMBER_WIDTH).fill(false);
  const field: boolean[][] = new Array(3).fill(undefined).map(emptyLine);
  //   const DEBUG = true;
  const DEBUG = false;
  const printThisField = (figure?: Figure) => {
    if (DEBUG) {
      return printField(field, figure);
    }
    return "";
  };
  const nextRock = () => {
    currentRockPointer = (currentRockPointer + 1) % shapesNames.length;
    return shapesNames[currentRockPointer];
  };
  const nextMovement = (): Movement => {
    currentMovementPointer = (currentMovementPointer + 1) % jetPattern.length;
    return jetPattern[currentMovementPointer] as Movement;
  };

  const addEmptyLine = () => {
    field.push(emptyLine());
  };

  const getHighestLineWithRock = getHighestLineWithRockFn(field);
  const prepareShapeToField = (rock: Rock): Figure => {
    // if (field.length > 30000) {
    //   field.splice(0, 10000);
    // }
    const highestRock = getHighestLineWithRock();
    const fieldNeededHeight = highestRock + 4 + rock.length;
    const currentLength = field.length;
    if (fieldNeededHeight >= currentLength) {
      for (let i = 0; i < fieldNeededHeight - currentLength; i++) {
        addEmptyLine();
      }
    } else {
      for (let i = 0; i < currentLength - fieldNeededHeight; i++) {
        field.pop();
      }
    }
    const vertices: Figure = [];
    for (let i = 0; i < rock.length; i++) {
      for (let j = 0; j < rock[i].length; j++) {
        if (rock[i][j]) {
          vertices.push([fieldNeededHeight - 1 - i, j + 2]);
        }
        // field[field.length - 1 - i][j + 2] = rock[i][j];
      }
    }
    return vertices;
  };

  const moveFigureLeft = (figure: Figure) => {
    const [[, minJ]] = [...figure].sort(([, a], [, b]) => a - b);
    if (minJ === 0) {
      return;
    }
    for (let k = 0; k < figure.length; k++) {
      const [i, j] = figure[k];
      if (field[i][j - 1]) {
        return;
      }
    }
    for (let k = 0; k < figure.length; k++) {
      figure[k][1]--;
    }
  };
  const moveFigureRight = (figure: Figure) => {
    const [[, maxJ]] = [...figure].sort(([, a], [, b]) => b - a);
    if (maxJ === CHAMBER_WIDTH - 1) {
      return;
    }
    for (let k = 0; k < figure.length; k++) {
      const [i, j] = figure[k];
      if (field[i][j + 1]) {
        return;
      }
    }
    for (let k = 0; k < figure.length; k++) {
      figure[k][1]++;
    }
  };
  const moveFigureDown = (figure: Figure): boolean => {
    const [[minI]] = [...figure].sort(([a], [b]) => a - b);
    // const sortedHorizontally = [...figure].sort(([, a], [, b]) => a - b);
    // const [[, jStart]] = sortedHorizontally;
    // const [, jEnd] = sortedHorizontally[sortedHorizontally.length - 1];
    if (minI === 0) {
      return true;
    }
    // we need to look for under the figure, for such case:
    // . ###
    //   @ #
    //   @ #
    //   @ #
    //   @ #
    // . . #
    // # # #
    for (let k = 0; k < figure.length; k++) {
      const [i, j] = figure[k];
      if (field[i - 1] === undefined) {
        console.log(i);
      }
      if (field[i - 1][j]) {
        return true;
      }
    }
    for (let i = 0; i < figure.length; i++) {
      figure[i][0]--;
    }
    return false;
  };

  const processRock = (shapeName: ShapeName) => {
    let isLanded = false;
    const rock = shapes[shapeName];
    const figure = prepareShapeToField(rock);
    printThisField(figure);
    if (DEBUG) {
      console.log();
    }

    while (!isLanded) {
      const currentMovement = nextMovement();
      switch (currentMovement) {
        case "<": {
          moveFigureLeft(figure);
          printThisField(figure);
          break;
        }
        case ">": {
          moveFigureRight(figure);
          printThisField(figure);
          break;
        }
        default:
          throw Error(`there aint to movement like ${currentMovement}`);
      }
      isLanded = moveFigureDown(figure);
      printThisField(figure);
    }
    putFigureToField(field, figure);
    // printField(field);
  };
  let rocksStopped = 0;
  const data: [number, number][] = [];

  const findLoop = (start = 100, size = 20) => {
    // const start = 100;
    // let size = 20;
    const stringifyLine = (line: boolean[]) =>
      line.map((a) => (a ? "#" : ".")).join("");
    const isLoop = (size: number) => {
      // if (size === 53) {debugger;}
      for (let i = start; i < start + size; i++) {
        if (stringifyLine(field[i]) !== stringifyLine(field[i + size])) {
          return false;
        }
      }
      return true;
    };
    while (!isLoop(size) && size < field.length - 2 * start) {
      size++;
    }
    return size < field.length - 2 * start ? size : -1;
  };

  //   while (rocksStopped < 500) {
  //     const currentRock = nextRock();
  //     if (rocksStopped === 20) {
  //       console.log();
  //     }
  //     processRock(currentRock);

  //     data.push([rocksStopped, getHighestLineWithRock() + 1]);
  //     if (rocksStopped === 500) {
  //       const loop = findLoop(100, 20);
  //       console.log("loop", loop);
  //     }

  //     rocksStopped++;
  //   }

  const all: [number, number][] = [];

  // 14 + 35n, 25 + 53n
  //   const startRock = 14;
  //   const loopRock = 35;
  //   const startH = 25;
  //   const loopH = 53;

  // 206 + 1740n, 350 + 2754n
  const startRock = 26;
  const loopRock = 1740;
  const startH = 350;
  const loopH = 2754;

  // const allN = rocksToStop - loopRock * Math.floor(rocksToStop / loopRock);

  while (rocksStopped < startRock) {
    const currentRock = nextRock();
    if (rocksStopped === 20) {
      console.log();
    }
    processRock(currentRock);
    // if (
    //   (getHighestLineWithRock() + 1) % 53 === 25 &&
    //   rocksStopped % 35 === 14
    // ) {
    //   all.push([rocksStopped, getHighestLineWithRock() + 1]);
    //   console.log(
    //     `rock no ${rocksStopped}, height: ${getHighestLineWithRock() + 1}`
    //   );
    //   //   console.log("rock start", rocksStopped, getHighestLineWithRock() + 1);
    // }
    // if (
    //   (getHighestLineWithRock() + 1) % 2754 === 350
    // ) {
    //   all.push([rocksStopped, getHighestLineWithRock() + 1]);
    //   console.log(
    //     `rock no ${rocksStopped}, height: ${getHighestLineWithRock() + 1}`
    //   );
    //   //   console.log("rock start", rocksStopped, getHighestLineWithRock() + 1);
    // }

    data.push([rocksStopped, getHighestLineWithRock() + 1]);
    // if (rocksStopped === 30200) {
    //   console.log(
    //     "height when looking for the loop",
    //     getHighestLineWithRock() + 1
    //   );
    //   const loop = findLoop(1000, 20);
    //   console.log("loop", loop);
    // }

    rocksStopped++;
  }

  rocksStopped += loopRock * Math.floor(rocksToStop / loopRock);
  while (rocksStopped < rocksToStop) {
    const currentRock = nextRock();
    processRock(currentRock);
    rocksStopped++;
  }

  //   console.log(JSON.stringify(all));
  //   const renderedData = printThisField();
  // const renderedData = printField(field);
  // const fs = require("fs");
  // fs.writeFileSync("./data4.txt", renderedData);
  //   console.log("last data", JSON.stringify(data.slice(data.length - 10)));
  return (
    getHighestLineWithRock() + 1 + loopH * Math.floor(rocksToStop / loopRock)
  );
};

const P1 = 2022;
const P2 = 1000000000000;
// console.log("small", day17(smallInput, P1)); // 14 + 35n, 25 + 53n
// console.log("small", day17(smallInput, P2)); // 14 + 35n, 25 + 53n
console.log("big", day17(bigInput, P2)); // 206 + 1740n, 350 + 2754n
// console.log("big", day17(bigInput, 120000)); // 206 + 1740n, 350 + 2754n
// 3184 - too low
